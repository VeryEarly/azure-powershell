
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Installs patches on the VM.
.Description
Installs patches on the VM.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20220301.IVirtualMachineInstallPatchesParameters
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.IComputeIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20220301.IVirtualMachineInstallPatchesResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IComputeIdentity>: Identity Parameter
  [Id <String>]: Resource identity path
  [Location <String>]: The location for which virtual machines under the subscription are queried.
  [ResourceGroupName <String>]: The name of the resource group.
  [SubscriptionId <String>]: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [VMExtensionName <String>]: The name of the virtual machine extension.
  [VMName <String>]: The name of the virtual machine where the extension should be created or updated.

INSTALLPATCHESINPUT <IVirtualMachineInstallPatchesParameters>: Input for InstallPatches as directly received by the API
  RebootSetting <VMGuestPatchRebootSetting>: Defines when it is acceptable to reboot a VM during a software update operation.
  [LinuxParameterClassificationsToInclude <VMGuestPatchClassificationLinux[]>]: The update classifications to select when installing patches for Linux.
  [LinuxParameterMaintenanceRunId <String>]: This is used as a maintenance run identifier for Auto VM Guest Patching in Linux.
  [LinuxParameterPackageNameMasksToExclude <String[]>]: packages to exclude in the patch operation. Format: packageName_packageVersion
  [LinuxParameterPackageNameMasksToInclude <String[]>]: packages to include in the patch operation. Format: packageName_packageVersion
  [MaximumDuration <String>]: Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours)
  [WindowParameterClassificationsToInclude <VMGuestPatchClassificationWindows[]>]: The update classifications to select when installing patches for Windows.
  [WindowParameterExcludeKbsRequiringReboot <Boolean?>]: Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
  [WindowParameterKbNumbersToExclude <String[]>]: Kbs to exclude in the patch operation
  [WindowParameterKbNumbersToInclude <String[]>]: Kbs to include in the patch operation
  [WindowParameterMaxPatchPublishDate <DateTime?>]: This is used to install patches that were published on or before this given max published date.
.Link
https://docs.microsoft.com/powershell/module/az.compute/install-azvirtualmachinepatch
#>
function Install-AzVirtualMachinePatch {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20220301.IVirtualMachineInstallPatchesResult])]
[CmdletBinding(DefaultParameterSetName='InstallExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Install', Mandatory)]
    [Parameter(ParameterSetName='InstallExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Install')]
    [Parameter(ParameterSetName='InstallExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Install', Mandatory)]
    [Parameter(ParameterSetName='InstallExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Path')]
    [System.String]
    # The name of the virtual machine.
    ${VMName},

    [Parameter(ParameterSetName='InstallViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.IComputeIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Install', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='InstallViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20220301.IVirtualMachineInstallPatchesParameters]
    # Input for InstallPatches as directly received by the API
    # To construct, see NOTES section for INSTALLPATCHESINPUT properties and create a hash table.
    ${InstallPatchesInput},

    [Parameter(ParameterSetName='InstallExpanded', Mandatory)]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded', Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Compute.Support.VMGuestPatchRebootSetting])]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Support.VMGuestPatchRebootSetting]
    # Defines when it is acceptable to reboot a VM during a software update operation.
    ${RebootSetting},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Compute.Support.VMGuestPatchClassificationLinux])]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Support.VMGuestPatchClassificationLinux[]]
    # The update classifications to select when installing patches for Linux.
    ${LinuxParameterClassificationsToInclude},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.String]
    # This is used as a maintenance run identifier for Auto VM Guest Patching in Linux.
    ${LinuxParameterMaintenanceRunId},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.String[]]
    # packages to exclude in the patch operation.
    # Format: packageName_packageVersion
    ${LinuxParameterPackageNameMasksToExclude},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.String[]]
    # packages to include in the patch operation.
    # Format: packageName_packageVersion
    ${LinuxParameterPackageNameMasksToInclude},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.String]
    # Specifies the maximum amount of time that the operation will run.
    # It must be an ISO 8601-compliant duration string such as PT4H (4 hours)
    ${MaximumDuration},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Compute.Support.VMGuestPatchClassificationWindows])]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Support.VMGuestPatchClassificationWindows[]]
    # The update classifications to select when installing patches for Windows.
    ${WindowParameterClassificationsToInclude},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
    ${WindowParameterExcludeKbsRequiringReboot},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.String[]]
    # Kbs to exclude in the patch operation
    ${WindowParameterKbNumbersToExclude},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.String[]]
    # Kbs to include in the patch operation
    ${WindowParameterKbNumbersToInclude},

    [Parameter(ParameterSetName='InstallExpanded')]
    [Parameter(ParameterSetName='InstallViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Body')]
    [System.DateTime]
    # This is used to install patches that were published on or before this given max published date.
    ${WindowParameterMaxPatchPublishDate},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Compute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Compute.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Install = 'Az.Compute.private\Install-AzVirtualMachinePatch_Install';
            InstallExpanded = 'Az.Compute.private\Install-AzVirtualMachinePatch_InstallExpanded';
            InstallViaIdentity = 'Az.Compute.private\Install-AzVirtualMachinePatch_InstallViaIdentity';
            InstallViaIdentityExpanded = 'Az.Compute.private\Install-AzVirtualMachinePatch_InstallViaIdentityExpanded';
        }
        if (('Install', 'InstallExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Compute.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Compute.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
